1.	Reverse a string
    a.	Write code that takes a string as input and returns the string reversed
    b.	i.e. “Hello” will be returned as “olleH”

    -Take in user string 
    -make new string to hold contenets of reversed outcome
    -send each element of user stirng starting from the end one at a time to form contents of new string
    -output new string that is reversed of user input string

2.	Capitalize letter
    a.	Write code that takes a string as input and capitalize the first letter of each word. Words will be separated by only one space. i.e. “hello world” should be outputted as “Hello World”

    -Take in user stirng
    -check elements of string to see if they are letters or spaces
    -if starting letter, capitalize
    -if letters after spaces, capitalize 
    -output updated string

3.	Compress a string of characters
    a.	For example, an input of "aaabbbbbccccaacccbbbaaabbbaaa" would compress to "3a5b4c2a3c3b3a3b3a"

    -count similar letters
    -compare each string element to next element
    -if same, keep counting. if diff, stop count and add count number to front of similar letters
    -make new string for output of compression 
    -add count and then letter that was counted to new string
    -output new compressed string

4.	BONUS CHALLENGE: Palindrome
    a.	A word, phrase, or sequence that reads the same backward as forward i.e. madam
    b.	Write code that takes a user input and checks to see if it is a Palindrome and reports the result

    -create new string to hold reversed string of user input
    -compare each element of user string with reversed string, or both strings as a whole 
    -report findings of comparison, if any differ then not a palindrome

1.	Happy Numbers
    a.	https://en.wikipedia.org/wiki/Happy_number
    b.	A happy number is a number defined by the following process: starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1. An example of a happy number is 19
    c.	Write a method that determines if a number is happy or sad

    -input from user as a string
    -if two numbers, split string up so each number is alone
    -square each number and add together
    -if sum is not 1, square again.  split first if more than one digit
    -need to keep variable of starting number to compare sums of square
    -if sum equals starting number, stop loop

2.	Prime Numbers
    a.	A prime number is a number that is only divisible by one and itself.
    b.	Write a method that prints out all prime numbers between 1 and 100 

    -loop 100 times to check each number to see if prime
    -start at 2 to bypass 1
    -each loop iteration should check the value of count by if it is only divisible by 1 and itself. 
    -use nested loop to check if it is divisible by any number from 1 to 100. 
    -if it is only divisible by itself or 1, it is prime
    -if not, it is not prime 



3.	Fibonacci
    a.	A series of numbers in which each number (Fibonacci number) is the sum of the two preceding numbers. The simplest is the series 1, 1, 2, 3, 5, 8, etc.
    b.	Write a method that does the Fibonacci sequence starting at 1
    c.	HARDER VERSION: Write a method that does the Fibonacci sequence starting at a number that a user inputs

    -create array to hold numbers
    -user input will be first element of array
    -use a loop to add numbers to array
    -first loop iteration should automatically add the first number to the next element
    -use the two elements before to determine current iteration number


1.	Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice.
    a.	Use Case:
        i.	Given numbers in an array: [5, 17, 77, 50] 
        ii.	Target: 55

2.	Palindrome is a word, phrase, or sequence that reads the same backward as forward i.e. madam. Write code that takes a user input and checks to see if it is a Palindrome and reports the result. You must handle spaces. 

3.	Given a list of integers, return a bool that represents whether or not all integers in the list can form a sequence of incrementing integers
    a.	Use case: 
        i.	{5, 7, 3, 8, 6}  false (no 4 to complete the sequence)
        ii.	{17, 15, 20, 19, 21, 16, 18}  true

4.	Create a method that takes an array of positive and negative numbers. Return an array where the first element is the count of the positive numbers and the second element is the sum of negative numbers. 
    a.	Use case: [7, 9, -3, -32, 107, -1, 36, 95, -14, -99, 21]


